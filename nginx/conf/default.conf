server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
      #  root   /usr/share/nginx/html;
      #  index  index.html;
    }
    
    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


# upstream api_pass_server {
#   server localhost:8011;
# }

# upstream api_novel_server {
#   server localhost:8012;
# }

server {
  listen 443 ssl http2;
  server_name 192.168.100.19;

  ssl_certificate /etc/nginx/certs/server.crt;
  ssl_certificate_key /etc/nginx/certs/server.key;

  ssl_session_timeout 5m;

  ssl_ciphers HIGH:!aNULL:!MD5;
  ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;
  ssl_prefer_server_ciphers   on;

  location / {
       root   /usr/share/nginx/html;
       index  index.html;
    # 在发送Post跨域请求前，会以Options方式发送预检请求，服务器接受时才会正式请求  
    if ($request_method = 'OPTIONS') {  
      # 允许跨域的请求，可以自定义变量$http_origin，*表示所有  
      add_header 'Access-Control-Allow-Origin' $http_origin;  
      # 允许携带cookie请求  
      add_header 'Access-Control-Allow-Credentials' 'true';  
      # 允许跨域请求的方法：GET,POST,OPTIONS,PUT  
      add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS,PUT,PATCH';  
      # 允许请求时携带的头部信息，*表示所有  
      add_header 'Access-Control-Allow-Headers' *;  
      # 允许发送按段获取资源的请求  
      add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';  
      # 一定要有！！！否则Post请求无法进行跨域！  
      add_header 'Access-Control-Max-Age' 1728000;  
      add_header 'Content-Type' 'text/plain; charset=utf-8';  
      add_header 'Content-Length' 0;  
      # 对于Options方式的请求返回204，表示接受跨域请求  
      return 204;  
    } 
  }
  location /gw/admin/v1/public/crawler {
    # 在发送Post跨域请求前，会以Options方式发送预检请求，服务器接受时才会正式请求  
    if ($request_method = 'OPTIONS') {  
      # 允许跨域的请求，可以自定义变量$http_origin，*表示所有  
      add_header 'Access-Control-Allow-Origin' $http_origin;  
      # 允许携带cookie请求  
      add_header 'Access-Control-Allow-Credentials' 'true';  
      # 允许跨域请求的方法：GET,POST,OPTIONS,PUT  
      add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS,PUT,PATCH';  
      # 允许请求时携带的头部信息，*表示所有  
      add_header 'Access-Control-Allow-Headers' *;  
      # 允许发送按段获取资源的请求  
      add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';  
      # 一定要有！！！否则Post请求无法进行跨域！  
      add_header 'Access-Control-Max-Age' 1728000;  
      add_header 'Content-Type' 'text/plain; charset=utf-8';  
      add_header 'Content-Length' 0;  
      # 对于Options方式的请求返回204，表示接受跨域请求  
      return 204;  
    } 
    default_type application/json;
      # 允许跨域的请求，可以自定义变量$http_origin，*表示所有  
      add_header 'Access-Control-Allow-Origin' $http_origin;  
      # 允许携带cookie请求  
      add_header 'Access-Control-Allow-Credentials' 'true';  
    return 200 '{"message":"","data":{},"code":12}';
  }
  # location /gw/pass {
  #   # set $upstream api_pass_server;
  #   # rewrite ^ /pass last;
  #   proxy_pass http://localhost:8011/;
  # }
  # location ~(^\/gw\/novel)(.*) {
  #   set $upstream api_novel_server;
  #   rewrite ^ /novel last;
  # }
  # location /gw/test/ {
  #   proxy_pass http://node-project:3000/;
  # }
}
